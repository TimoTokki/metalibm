# -*- coding: utf-8 -*-

import commands
import argparse


import metalibm_functions.ml_log10
import metalibm_functions.ml_log1p
import metalibm_functions.ml_log2
import metalibm_functions.ml_log
import metalibm_functions.ml_exp

from metalibm_core.core.ml_formats import ML_Binary32, ML_Binary64, ML_Int32
from metalibm_core.targets.common.vector_backend import VectorBackend

from valid.test_utils import *


# old scheme
old_scheme_function_list = [
  metalibm_functions.ml_log1p.ML_Log1p,
  metalibm_functions.ml_log.ML_Log,
]

# new scheme (ML_Function)
new_scheme_function_list = [
  NewSchemeTest(
    "basic log2 test",
    metalibm_functions.ml_log2.ML_Log2,
    [
      {"precision": ML_Binary32}, 
      {"precision": ML_Binary64}
    ]
  ), 
  NewSchemeTest(
    "basic log10 test",
    metalibm_functions.ml_log10.ML_Log10,
    [
      {"precision": ML_Binary32}, 
      {"precision": ML_Binary64}
    ]
  ), 
  NewSchemeTest(
    "basic exp test",
    metalibm_functions.ml_exp.ML_Exponential,
    [
      {"precision": ML_Binary32}, 
      {"precision": ML_Binary64},
    ]
  ), 
  NewSchemeTest(
    "vector exp test",
    metalibm_functions.ml_exp.ML_Exponential,
    [
      {"precision": ML_Binary32, "vector_size": 2, "target": VectorBackend()}, 
    ]
  ), 
]

def old_scheme_test(function_ctor, options = []):
  function_name = function_ctor.get_name()
  try: 
    fct = function_ctor()
  except:
    return False
  return True



# test_list = [(function, old_scheme_test) for function in old_scheme_function_list]
test_list = []




success = True
result_map = {}
# list of TestResult objects generated by execution
# of new scheme tests
result_details = []

for function, test_function in test_list:
  test_result = test_function(function)
  result_map[function] = test_result 
  success &= test_result


for test_scheme in new_scheme_function_list:
  test_result = test_scheme.perform_all_test()
  result_details.append(test_result)

  success = success and test_result.get_result()

# Printing test summary for old scheme
for function in result_map:
  function_name = function.get_name()
  if not result_map[function]:
    print "%s \033[31;1m FAILED \033[0;m" % function_name
  else:
    print "%s SUCCESS" % function_name

# Printing test summary for new scheme
for result in result_details:
  print result.get_details()

if success:
  print "OVERALL SUCCESS"
  exit(0)
else:
  print "OVERALL FAILURE"
  exit(1)
